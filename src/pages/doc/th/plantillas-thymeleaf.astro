---
import Layout from "../../../layout/Layout.astro";
import Navbar from "../../../component/Navbar.astro";
import Sidebar from "../../../component/Sidebar.astro";
import Breadcrumb from "../../../component/Breadcrumb.astro";
import CodeComponent from "../../../react/CodeComponent";
---

<Layout title="DevDocs :: Thymeleaf">
  <Navbar />
  <Sidebar />
  <div class="px-10 py-24 sm:ml-64">
    <Breadcrumb links={[{ href: "/DevDocs/home", label: "Home" }, { href: "/DevDocs/thymeleaf", label: "Thymeleaf" }, { label: "Tema 05", current: true }]} />
    <br>
    <br>
    <h1 class="text-4xl font-bold text-white">Plantillas Thymeleaf</h1>
    <br>
    <div class="space-y-4 text-white">
<p>
    Thymeleaf es un motor de plantillas para Java que permite crear vistas dinámicas en aplicaciones web. Se utiliza comúnmente en aplicaciones que siguen el patrón MVC (Modelo-Vista-Controlador), facilitando la separación de la lógica de la aplicación y la presentación visual. A continuación, se describen los aspectos clave de las plantillas Thymeleaf.
</p>

<h3 class="text-blue-500 font-bold">Características de las Plantillas Thymeleaf</h3>
<ul>
    <li>
        <strong>Lenguaje de Plantillas Natural:</strong> Las plantillas Thymeleaf son archivos HTML estándar que pueden ser visualizados en el navegador sin necesidad de ser procesados por el servidor, lo que permite a los diseñadores trabajar directamente con ellas.
    </li>
    <li>
        <strong>Expresiones Thymeleaf:</strong> Thymeleaf utiliza una sintaxis basada en atributos HTML para incluir lógica en las plantillas. Esto permite la inclusión de variables, condicionales, bucles, y más, usando la sintaxis <code class="bg-slate-700 px-1 py-1/2 rounded-lg">th:text</code>, <code class="bg-slate-700 px-1 py-1/2 rounded-lg">th:if</code>, <code class="bg-slate-700 px-1 py-1/2 rounded-lg">th:each</code>, etc.
    </li>
    <li>
        <strong>Soporte para Fragmentos:</strong> Permite crear fragmentos reutilizables de HTML, lo que ayuda a mantener el código organizado y reducir la duplicación, utilizando la sintaxis <code class="bg-slate-700 px-1 py-1/2 rounded-lg">th:replace</code> o <code class="bg-slate-700 px-1 py-1/2 rounded-lg">th:include</code>.
    </li>
    <li>
        <strong>Manejo de Formularios:</strong> Thymeleaf facilita la creación de formularios complejos y la gestión de la validación, con soporte para mostrar mensajes de error y la vinculación de datos del modelo a los campos del formulario.
    </li>
    <li>
        <strong>Internacionalización:</strong> Thymeleaf incluye soporte para la internacionalización, lo que permite la creación de aplicaciones multilingües de manera sencilla.
    </li>
    <li>
        <strong>Extensibilidad:</strong> Permite crear dialectos personalizados, lo que permite extender la funcionalidad del motor de plantillas para adaptarse a necesidades específicas.
    </li>
</ul>

<h3 class="text-blue-500 font-bold">Ejemplo de una Plantilla Thymeleaf</h3>
<p>
    A continuación, se muestra un ejemplo básico de una plantilla Thymeleaf:
</p>

<CodeComponent codeString={`
<!DOCTYPE html>
<html xmlns:th="http://www.w3.org/1999/xhtml">
<head>
    <title th:text="\${titulo}">Título por Defecto</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" />
</head>
<body>
    <h1 class="text-4xl font-bold text-blue-500" th:text="\${titulo}">Título por Defecto</h1>
    <p th:text="'Bienvenido a la aplicación Thymeleaf con Spring!'"></p>
    <form action="#" th:action="@{/submit}" method="post" th:object="\${usuario}">
        <label for="nombre">Nombre:</label>
        <input type="text" id="nombre" th:field="*{nombre}" />
        <button type="submit">Enviar</button>
    </form>
</body>
</html>
`} language="html"/>

<p>
  En este ejemplo, la plantilla muestra un título que se establece a través de una variable del modelo <code class="bg-slate-700 px-1 py-1/2 rounded-lg">{`\${titulo}`}</code> y un formulario que envía datos del usuario.
</p>

    </div>
  </div>
</Layout>
